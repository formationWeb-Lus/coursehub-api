{
  "openapi": "3.0.3",
  "info": {
    "title": "CourseHub API",
    "version": "1.0.0",
    "description": "API for managing courses, users, categories, enrollments, and instructors"
  },
  "servers": [
    {
      "url": "https://coursehub-api-2bva.onrender.com"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "_id": { "type": "string", "example": "64a1234bcdef567890abcd12" },
          "name": { "type": "string", "example": "John Doe" },
          "email": { "type": "string", "format": "email", "example": "john.doe@example.com" },
          "password": { "type": "string", "format": "password", "example": "Password123" },
          "role": { "type": "string", "enum": ["student", "teacher", "admin"], "example": "teacher" },
          "firstName": { "type": "string", "example": "John" },
          "lastName": { "type": "string", "example": "Doe" },
          "age": { "type": "integer", "example": 30 },
          "enrolledCourses": {
            "type": "array",
            "items": { "type": "string", "description": "Course ID" }
          }
        }
      },
      "Course": {
        "type": "object",
        "required": ["title", "description", "price", "teacherId", "duration", "level"],
        "properties": {
          "_id": { "type": "string", "example": "64a1234bcdef567890abcd34" },
          "title": { "type": "string", "example": "Web Development" },
          "description": { "type": "string", "example": "Learn how to build websites" },
          "price": { "type": "number", "example": 99.99 },
          "duration": { "type": "integer", "example": 120 },
          "level": { "type": "string", "enum": ["beginner", "intermediate", "advanced"], "example": "intermediate" },
          "category": { "type": "string", "example": "Development" },
          "teacherId": { "type": "string", "example": "64a1234bcdef567890abcd56" },
          "image": { "type": "string", "format": "uri", "example": "https://example.com/image.png" }
        }
      },
      "Category": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "_id": { "type": "string", "example": "64a1234bcdef567890abcd78" },
          "name": { "type": "string", "example": "Programming" },
          "description": { "type": "string", "example": "All programming related courses" },
          "createdAt": { "type": "string", "format": "date-time" }
        }
      },
      "Enrollment": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "example": "64a1234bcdef567890abcd90" },
          "courseId": { "type": "string", "example": "64a1234bcdef567890abcd34" },
          "studentId": { "type": "string", "example": "64a1234bcdef567890abcd12" },
          "progress": { "type": "integer", "example": 50 },
          "grade": { "type": "string", "example": "A" },
          "enrolledAt": { "type": "string", "format": "date-time" }
        }
      },
      "Instructor": {
        "type": "object",
        "required": ["name", "expertise"],
        "properties": {
          "_id": { "type": "string", "example": "64a1234bcdef567890abcd91" },
          "name": { "type": "string", "example": "Jane Smith" },
          "expertise": { "type": "string", "example": "JavaScript" },
          "bio": { "type": "string", "example": "Experienced JS developer and teacher" },
          "createdAt": { "type": "string", "format": "date-time" }
        }
      },
      "AuthRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": { "type": "string", "format": "email", "example": "user@example.com" },
          "password": { "type": "string", "format": "password", "example": "Password123" }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "token": { "type": "string", "example": "eyJhbGciOiJI..." }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
  "/api/auth/register": {
    "post": {
      "tags": ["Auth"],
      "summary": "Register a new user",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": ["email", "password", "name"],
              "properties": {
                "email": { "type": "string", "example": "user@example.com" },
                "password": { "type": "string", "example": "Password123" },
                "name": { "type": "string", "example": "John Doe" }
              }
            }
          }
        }
      },
      "responses": {
        "201": { "description": "User registered successfully" },
        "400": { "description": "Missing required fields" },
        "409": { "description": "Email already exists" },
        "500": { "description": "Server error" }
      }
    }
  },
  "/api/auth/login": {
    "post": {
      "tags": ["Auth"],
      "summary": "Login a user and return a JWT",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": ["email", "password"],
              "properties": {
                "email": { "type": "string", "example": "user@example.com" },
                "password": { "type": "string", "example": "Pass2word123" }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Login successful, JWT returned",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": { "type": "string", "example": "eyJhbGciOi..." }
                }
              }
            }
          }
        },
        "400": { "description": "Missing email or password" },
        "401": { "description": "Invalid credentials" },
        "500": { "description": "Server error" }
      }
    }
  },
  "/auth/google": {
    "get": {
      "tags": ["Auth"],
      "summary": "Redirect to Google for authentication",
      "responses": {
        "302": {
          "description": "Redirect to Google Login"
        }
      }
    }
  },
  "/auth/google/callback": {
    "get": {
      "tags": ["Auth"],
      "summary": "Handle Google OAuth callback",
      "responses": {
        "302": {
          "description": "Redirect to dashboard or error"
        }
      }
    }
  },
  "/api/users": {
    "get": {
      "tags": ["User"],
      "summary": "List all users",
      "responses": {
        "200": {
          "description": "List of users",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/User" }
              }
            }
          }
        }
      }
},

        "security": []
      },
      "post": {
        "tags": ["User"],
        "summary": "Create a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": { "description": "Invalid input" }
        }
      }
    },
    "/users/{id}": {
  "get": {
    "tags": ["User"],
    "summary": "Get a user by ID",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "User ID",
        "required": true,
        "schema": { "type": "string" }
      }
    ],
    "responses": {
      "200": {
        "description": "User details",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/User" }
          }
        }
      },
      "404": { "description": "User not found" }
    }
  },
  "put": {
    "tags": ["User"],
    "summary": "Update user by ID",
    "security": [
      {
        "oauth2": ["write:user", "update:user"]
      }
    ],
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "User ID",
        "required": true,
        "schema": { "type": "string" }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": { "$ref": "#/components/schemas/User" }
        }
      }
    },
    "responses": {
      "200": { "description": "User updated" },
      "400": { "description": "Invalid input" },
      "404": { "description": "User not found" }
    }
  },
  "post": {
    "tags": ["User"],
    "summary": "Create a new user",
    "security": [
      {
        "oauth2": ["write:user"]
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": { "$ref": "#/components/schemas/User" }
        }
      }
    },
    "responses": {
      "201": {
        "description": "User created",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/User" }
          }
        }
      },
      "400": { "description": "Invalid input" }
    }
  },
  "delete": {
    "tags": ["User"],
    "summary": "Delete user by ID",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "User ID",
        "required": true,
        "schema": { "type": "string" }
      }
    ],
    "responses": {
      "200": { "description": "User deleted" },
      "404": { "description": "User not found" }
    }
  }
},

    "/courses": {
      "get": {
        "tags": ["Course"],
        "summary": "List all courses",
        "responses": {
          "200": {
            "description": "List of courses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Course" }
                }
              }
            }
          }
        },
        "security": []
      },
      "post": {
        "tags": ["Course"],
        "summary": "Create a new course",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Course" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Course created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Course" }
              }
            }
          },
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/courses/{id}": {
      "get": {
        "tags": ["Course"],
        "summary": "Get course by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Course ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Course details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Course" }
              }
            }
          },
          "404": { "description": "Course not found" }
        },
        "security": []
      },
      "put": {
        "tags": ["Course"],
        "summary": "Update course by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Course ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "reques2tBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Course" }
            }
          }
        },
        "responses": {
          "200": { "description": "Course updated" },
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Course not found" }
        }
      },
      "delete": {
        "tags": ["Course"],
        "summary": "Delete course by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Course ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Course deleted" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Course not found" }
        }
      }
    },

    "/categories": {
      "get": {
        "tags": ["Category"],
        "summary": "List all categories",
        "responses": {
          "200": {
            "description": "List of categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Category" }
                }
              }
            }
          }
        },
        "security": []
      },
      "post": {
        "tags": ["Category"],
        "summary": "Create a new category",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Category" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Category" }
              }
            }
          },
          "400": { "description": "Invalid input" }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "tags": ["Category"],
        "summary": "Get category by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Category ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Category details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Category" }
              }
            }
          },
          "404": { "description": "Category not found" }
        }
      },
      "put": {
        "tags": ["Category"],
        "summary": "Update category by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Category ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Category" }
            }
          }
        },
        "responses": {
          "200": { "description": "Category updated" },
          "400": { "description": "Invalid input" },
          "404": { "description": "Category not found" }
        }
      },
      "delete": {
        "tags": ["Category"],
        "summary": "Delete category by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Category ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Category deleted" },
          "404": { "description": "Category not found" }
        }
      }
    },

    "/enrollments": {
      "get": {
        "tags": ["Enrollment"],
        "summary": "List all enrollments",
        "responses": {
          "200": {
            "description": "List of enrollments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Enrollment" }
                }
              }
            }
          }
        },
        "security": []
      },
      "post": {
        "tags": ["Enrollment"],
        "summary": "Create a new enrollment",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Enrollment" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Enrollment created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Enrollment" }
              }
            }
          },
          "400": { "description": "Invalid input" }
        }
      }
    },
    "/enrollments/{id}": {
      "get": {
        "tags": ["Enrollment"],
        "summary": "Get enrollment by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Enrollment ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Enrollment details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Enrollment" }
              }
            }
          },
          "404": { "description": "Enrollment not found" }
        }
      },
      "put": {
        "tags": ["Enrollment"],
        "summary": "Update enrollment by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Enrollment ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Enrollment" }
            }
          }
        },
        "responses": {
          "200": { "description": "Enrollment updated" },
          "400": { "description": "Invalid input" },
          "404": { "description": "Enrollment not found" }
        }
      },
      "delete": {
        "tags": ["Enrollment"],
        "summary": "Delete enrollment by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Enrollment ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Enrollment deleted" },
          "404": { "description": "Enrollment not found" }
        }
      }
    }
  }
